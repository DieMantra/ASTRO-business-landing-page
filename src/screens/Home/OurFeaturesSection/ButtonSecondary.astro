---
interface Props {
	colorScheme: 'blue' | 'white';
	classSelector: string;
}
const { colorScheme, classSelector } = Astro.props;
---

{
	colorScheme === 'blue' ? (
		<button
			class={`blue ${classSelector}`}
			data-highlight='true'
			data-highlight-color='--blue'
		>
			<slot />
		</button>
	) : (
		<button
			class={`white ${classSelector}`}
			data-highlight='true'
			data-highlight-color='--white'
		>
			<slot />
		</button>
	)
}

<style lang='scss'>
	@use 'src/sass/mixins' as m;

	button {
		border-radius: 50px;
		padding: 0.8rem 2rem;
		color: rgba(var(--blue));
		transition: all 0.5s ease-in-out;

		@include m.hasHover {
			transition: all 0.1s ease-in-out;
			transform: translateY(-2px);
			box-shadow: var(--shadow-btn);
		}

		@include m.hasFocus {
			transition: all 0.1s ease-in-out;
		}
	}

	button.blue {
		background-color: transparent;
		border: 1px solid rgba(var(--blue), 0.5);

		@include m.hasFocus {
			background-color: rgba(var(--blue), 0.1);
			outline: 2px solid rgba(var(--blue), 0.5);
			outline-offset: 3px;
		}

		@include m.hasHover {
			background-color: rgba(var(--blue), 0.2);
		}
	}
	button.white {
		background-color: rgba(var(--white));
		border: 1px solid rgba(var(--white));
		text-shadow: var(--text-shadow-1) rgba(var(--blue), 0.25);

		@include m.hasFocus {
			background-color: rgba(var(--white));
			outline: 2px solid rgba(var(--white), 0.7);
			outline-offset: 3px;
		}

		@include m.hasHover {
			background-color: rgb(239, 242, 255);
		}
	}
</style>
