---
import { Image } from '@astrojs/image/components';
import Button from './UI/ButtonPrimary.astro';
import HamburgerMenu from './UI/HamgurberMenu.astro';
const SVG_LOGO = '/images/logos/LW.G.svg';

const links = [
	{ href: '/', text: 'Home' },
	{ href: '/business.html', text: 'Business' },
	{ href: '/partners.html', text: 'Partners' },
	{ href: '/helpAndFaq.html', text: 'Help & FAQ' },
];
---

<script>
	const nav = document.getElementById('nav') as HTMLElement;
	const showMenuBtn = document.getElementById('hamburger-btn');
	const navMenu = document.getElementById('nav--menu') as HTMLMenuElement;
	const navLinks = document.getElementsByClassName('navigation-links');
	const windowLocation = window.location.pathname;
	const navHeight = nav.clientHeight || 0;

	showMenuBtn?.addEventListener('click', () => {
		navMenu.classList.toggle('show');
		document.querySelector('body')!.classList.toggle('noScroll');
		showNav({ isTop: scrollIsAtTop() });
	});

	let prevScrollPosition: number = 0;
	let interval: number;
	let timeSpentScrolling: number = 0;
	let isScrollTimerActive: boolean = false;
	let windowCurrentPosition: number = 0;
	let isNavVisible: boolean = true;
	document.addEventListener('scroll', () => {
		if (!isScrollTimerActive) {
			isScrollTimerActive = true;

			interval = setInterval(() => {
				timeSpentScrolling += 0.35;

				if (timeSpentScrolling >= 0.35 || !isScrollTimerActive) {
					// CONTINUE timer and check the position
					checkScrollPosition();
				}

				if (
					timeSpentScrolling > 0.4 &&
					windowCurrentPosition === window.scrollY
				) {
					// END the timer and check position
					checkScrollPosition();
					stopTimer();
				}

				windowCurrentPosition = window.scrollY;
			}, 350);
		}
	});

	function checkScrollPosition() {
		const scrolledBackOrTop = scrollIsAtTop() || scrolledBack();
		const scrolledForwards = scrolledForward();

		if (scrolledBackOrTop) {
			if (!isNavVisible) {
				showNav({ isTop: scrollIsAtTop() });
				isNavVisible = true;
			}
			prevScrollPosition = window.scrollY;
			return;
		}
		if (scrolledForwards) {
			if (isNavVisible) {
				hideNav();
				isNavVisible = false;
			}
			prevScrollPosition = window.scrollY;

			return;
		}
	}

	function stopTimer() {
		isScrollTimerActive = false;
		timeSpentScrolling = 0;
		clearInterval(interval);
	}

	function scrolledForward(): boolean {
		return (
			window.scrollY > navHeight &&
			window.scrollY > prevScrollPosition + navHeight
		);
	}
	function scrolledBack(): boolean {
		return (
			window.scrollY < prevScrollPosition - navHeight &&
			window.scrollY < prevScrollPosition
		);
	}
	function scrollIsAtTop(): boolean {
		return window.scrollY < navHeight;
	}

	function showNav({ isTop }: { isTop: boolean }) {
		nav.classList.remove('isHidden');
		if (isTop) {
			nav.classList.add('isTop');
			nav.classList.remove('isScrolledUpOpen');
		} else {
			nav.classList.remove('isTop');
			nav.classList.add('isScrolledUpOpen');
		}
	}

	function hideNav() {
		nav.classList.add('isHidden');
		nav.classList.remove('isTop');
		nav.classList.remove('isScrolledUpOpen');
	}

	for (let i = 0; i < navLinks.length; i++) {
		const link = navLinks.item(i);
		const linkId = link?.getAttribute('id');
		if (windowLocation === link?.getAttribute('data-pathname') && linkId) {
			document.getElementById(linkId)?.classList.add('active');
		}
	}
</script>

<nav class='nav' id='nav'>
	<div class='controls-wrapper'>
		<Image
			class='logo'
			src={SVG_LOGO}
			alt={'business-logo'}
			fit={'inside'}
			format={'svg'}
			width={1}
			height={1}
		/>
		<menu class='menu' id='nav--menu'>
			<ul class='ul'>
				{
					links.map((link) => (
						<li>
							<a
								data-pathname={link.href}
								data-highlight='true'
								data-highlight-color='rgba(var(--grey), 0.1)'
								href={link.href}
								id={link.href}
								class='navigation-links'
							>
								{link.text}
							</a>
						</li>
					))
				}
			</ul>

			<div class='btn_signup btn_signup--mobile'>
				<Button background={'--blue'} color={'--white'} height={'3rem'}>
					Sign Up
				</Button>
			</div>
		</menu>
		<div class='btn_signup'>
			<Button background={'--orange'} color={'--white'} height={'3rem'}>
				Sign Up
			</Button>
		</div>
	</div>
</nav>
<div class='open-menu-btn'>
	<HamburgerMenu classes='open-menu-btn' />
</div>

<style lang='scss'>
	@use '../sass/mixins.scss' as m;
	.nav {
		--padding-block: 0.9rem;
		--transitionSpeed: 0.35s;
		width: 100%;
		padding: 1.2rem 2rem;
		font-weight: 400;
		font-size: 1.6rem;
		z-index: 10;
		position: fixed;
		left: 50%;
		transform: translateX(-50%);
		transition: transform var(--transitionSpeed) ease,
			background-color var(--transitionSpeed) ease,
			opacity var(--transitionSpeed) ease, border var(--transitionSpeed);
		border-bottom: transparent solid 1px;
		backdrop-filter: blur(5px);

		&.isTop {
			transform: translateY(0) translateX(-50%);
			background-color: rgba(var(--white), 0.1);
		}

		&.isHidden {
			transform: translateY(-100%) translateX(-50%);
			opacity: 0;
		}

		&.isScrolledUpOpen {
			transform: translateY(0) translateX(-50%);
			background-color: rgba(var(--white), 0.9);
			border-bottom: rgba(var(--grey), 0.1) solid 1px;
		}
	}
	.controls-wrapper {
		max-width: var(--screen-large);
		display: flex;
		align-items: center;
		justify-content: space-between;
		margin: 0 auto;

		@media screen and (width < 768px) {
			height: 45px;
			display: flex;
			justify-content: flex-start;
		}
	}
	.logo {
		width: auto;
		height: 2rem;
		opacity: 0.75;
		padding-left: 1.2rem;
	}
	menu {
		display: flex;
		align-items: center;
		margin: 0;
		padding: 0;
	}

	.btn_signup {
		&--mobile {
			margin-top: 3rem;
			text-align: center;
		}
	}

	.open-menu-btn {
		display: none;
		@media screen and (width < 768px) {
			display: initial;
			position: fixed;
			top: calc(6rem / 4);
			right: calc(6rem / 4);
			z-index: 9999;
		}
	}

	.ul {
		display: flex;
		gap: 6px;
		& a {
			border-radius: 5px;
			color: rgba(var(--grey));
			padding-inline: 2rem;
			padding-block: var(--padding-block);
			height: 100%;
			width: 100%;
			transition: all 0.2s ease-in-out, outline-offset 0.3s ease-in-out;

			outline: rgba(var(--grey), 0) solid 2px;
			outline-offset: -5px;

			box-shadow: inset 0 0 0px 15px rgba(var(--grey), 0),
				0 0 20px 10px rgba(var(--grey), 0);

			&.active {
				background-color: rgba(var(--grey), 0.05);
			}

			@include m.hasHover {
				color: rgba(var(--black));
				text-shadow: 0 1px 5px rgba(var(--grey), 0.25);
				backdrop-filter: blur(50px);
				box-shadow: inset 0 0 5px 5px rgba(var(--grey), 0.02),
					0 0 2px 0px rgba(var(--grey), 0.05);
				background-color: rgba(var(--grey), 0.075);
				outline: rgba(var(--grey), 0.075) solid 2px;
				outline-offset: 2px;
			}

			&:active {
				color: rgba(var(--black));
				text-shadow: 0 1px 5px rgba(var(--grey), 0.25);
				box-shadow: inset 0 0 5px 5px rgba(var(--grey), 0.025),
					0 0 5px 0px rgba(var(--grey), 0.05);
				background-color: rgba(var(--grey), 0.15);
				outline: rgba(var(--grey), 0.065) solid 1px;
				outline-offset: 1px;
			}
		}
	}

	@media screen and (width < 768px) {
		.logo {
			padding-left: 1rem;
		}

		.btn_signup {
			display: none;
			&--mobile {
				display: block;
			}
		}

		menu {
			display: none;
			z-index: 100;
			position: absolute;
			top: 100%;
			left: 0;
			width: 100%;
			height: 100vh;
			transition: all 0.5s ease;
			border-top: 1px solid rgba(var(--grey), 0.2);
			background-color: rgba(var(--white), 0.99);
			transform: translateX(-100%);

			& .ul {
				flex-direction: column;
				align-items: center;
				gap: 26px;
				margin-top: 4rem;
			}

			&.show {
				display: block;
				animation: fadeIn 0.2s ease;
				animation-fill-mode: forwards;

				@keyframes fadeIn {
					0% {
						opacity: 0;
					}
					100% {
						opacity: 1;
						transform: translateX(0%);
					}
				}
			}
		}
	}
	@media screen and (width > 768px) {
		.btn_signup {
			display: block;
			&--mobile {
				display: none;
			}
		}

		.open-menu-btn {
			display: none;
		}
	}
</style>
