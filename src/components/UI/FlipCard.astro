---
import ButtonSecondary from './ButtonSecondary.astro';

interface Props {
	buttonText: string;
	colorScheme: 'blue' | 'white';
	isFlip?: boolean;
	height?: `${number}px` | `${number}rem`;
}

const {
	colorScheme,
	buttonText,
	isFlip = true,
	height = '270px',
} = Astro.props;

const buttonColor = colorScheme === 'blue' ? 'white' : 'blue';
---

<script>
	const articleCard = document.querySelectorAll('.cardArticle');
	articleCard.forEach((card) => {
		card.addEventListener('click', (e) => {
			const target = e.target as HTMLElement;
			if (!target || !target.classList) return;
			const front = card.querySelector('.front');
			const back = card.querySelector('.back');
			if (!front || !back) return;

			if (target.classList.contains('openReadMoreBtn')) {
				// close an open cards
				// articleCard.forEach((card) => {
				// 	if (card.classList.contains('open')) {
				// 		card.classList.remove('open');
				// 		card.querySelector('.front')?.classList.remove('hide');
				// 		card.querySelector('.back')?.classList.remove('show');
				// 	}
				// });

				card.classList.add('open');
				front.classList.add('hide');
				back.classList.add('show');
				return;
			}
			if (target.classList.contains('closeReadMoreBtn')) {
				card.classList.remove('open');
				front.classList.remove('hide');
				back.classList.remove('show');
				return;
			}
		});
	});
</script>

<article
	class='cardArticle'
	class:list={colorScheme}
	data-highlight
	data-highlight-color={colorScheme === 'blue'
		? 'rgba(var(--blue), 0.2)'
		: 'rgba(var(--orange), 0.1)'}
>
	<div class='front'>
		<slot name='front' />

		{
			isFlip ? (
				<ButtonSecondary
					classSelector='openReadMoreBtn'
					colorScheme={buttonColor}
				>
					{buttonText}
				</ButtonSecondary>
			) : (
				''
			)
		}
	</div>
	{
		isFlip ? (
			<div class='back'>
				<slot name='back' />

				<ButtonSecondary
					classSelector='closeReadMoreBtn'
					colorScheme={buttonColor}
				>
					{buttonText}
				</ButtonSecondary>
			</div>
		) : (
			''
		)
	}
</article>

<style lang='scss' define:vars={{ height }}>
	@use 'src/sass/mixins' as m;
	.spacer {
		height: 100%;
		flex-grow: 1;
	}

	article {
		perspective: 1000px;
		position: relative;
		width: 100%;
		min-height: var(--height);
		transition: transform 1s ease-out, width 0.5s ease-in;

		@include m.hasHover {
			transition: transform 0.1s ease-in;
			transform: translateY(-5px) scale(1.01);
			z-index: 2;
		}

		&.open {
		}
		&.closed {
		}
	}

	.front,
	.back {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		backface-visibility: hidden;

		transition: all 0.5s ease, box-shadow 0.2s ease;
		padding: 2rem;
		text-align: center;
		padding: 1rem;
		padding-bottom: 3rem;
		border-radius: 5px;
		display: flex;
		flex-direction: column;
		padding: 1rem;
		padding-bottom: 2rem;
		justify-content: stretch;
	}
	$scale-init: 0.5;
	$scale-end: 1;
	.back {
		transform: rotateY(-180deg);
		opacity: 0;
		scale: $scale-init;
	}
	.front.hide {
		transform: rotateY(180deg);
		scale: $scale-init;
		opacity: 0;
	}
	.back.show {
		opacity: 1;
		scale: $scale-end;
		transform: rotateY(0deg);
	}

	article.blue {
		.front {
			background-color: rgba(var(--blue));
		}
		.back {
			background-color: rgba(var(--blue-light));
		}
		.front,
		.back {
			color: rgba(var(--white));

			box-shadow: 0 2.5px 5px rgba(0, 0, 0, 0.1), 0 5px 8px rgba(0, 0, 0, 0.1),
				0 8px 20px rgba(0, 0, 0, 0.1), 0 8px 40px rgba(0, 0, 0, 0.3);

			@include m.hasHover {
				box-shadow: 0 2.5px 10px rgba(0, 0, 0, 0.1),
					0 5px 16px rgba(0, 0, 0, 0.1), 0 8px 40px rgba(0, 0, 0, 0.1),
					0 8px 80px rgba(0, 0, 0, 0.3);
			}
		}
	}

	article.white {
		.front,
		.back {
			background-color: rgba(var(--white));

			box-shadow: 0 2.5px 5px rgba(0, 0, 0, 0.1), 0 5px 8px rgba(0, 0, 0, 0.1);

			@include m.hasHover {
				box-shadow: 0 2.5px 10px rgba(0, 0, 0, 0.1),
					0 5px 16px rgba(0, 0, 0, 0.1), 0 8px 40px rgba(0, 0, 0, 0.1);
			}
		}
	}
</style>
