---
interface Props {
	pixelsInViewDistance?: number;
	transitionSpeedMs?: number;
	translateX?: `${'-' | ''}${number}px` | `${'-' | ''}${number}%`;
	translateY?: `${'-' | ''}${number}px` | `${'-' | ''}${number}%`;
	mobileTranslateX?: `${'-' | ''}${number}px` | `${'-' | ''}${number}%`;
	mobileTranslateY?: `${'-' | ''}${number}px` | `${'-' | ''}${number}%`;
	transition?: keyof typeof transitions;
}

const {
	pixelsInViewDistance = 50,
	transitionSpeedMs = 300,
	translateX = '0px',
	translateY = '0px',
	mobileTranslateX = translateX,
	mobileTranslateY = translateY,
	transition = 'snappyCurve',
} = Astro.props;

const transitions = {
	snappyCurve: 'cubic-bezier(0.39, 0.575, 0.565, 1)',
	excitementCurve: 'cubic-bezier(0.19, 1, 0.22, 1)',
	gracefulCurve: 'cubic-bezier(0.23, 1, 0.32, 1)',
	dramaticCurve: 'cubic-bezier(0.47, 0, 0.745, 0.715)',
	bouncyCurve: 'cubic-bezier(0.71, -0.46, 0.88, 0.45)',
};

const speedVar = `${transitionSpeedMs}ms`,
	transitionVar = transitions[transition];
---

<script>
	const fadeInSlots = document.querySelectorAll('.fadeInSlot');

	const observer = new IntersectionObserver(
		(entries) => {
			for (let i = 0; i < entries.length; i++) {
				if (entries[i].isIntersecting) {
					entries[i].target.classList.add('show');
				}
			}
		},
		{ threshold: 0.4 }
	);

	for (let i = 0; i < fadeInSlots.length; i++) {
		observer.observe(fadeInSlots[i]);
	}
</script>

<div class='fadeInSlot' data-pixels-inview={pixelsInViewDistance}>
	<slot />
</div>

<style
	lang='scss'
	define:vars={{
		speedVar,
		translateX,
		translateY,
		transitionVar,
		mobileTranslateX,
		mobileTranslateY,
	}}
>
	.fadeInSlot {
		transition: all var(--speedVar) var(--transitionVar);
		opacity: 0;
		transform: translate(var(--translateX), var(--translateY))
			translate3d(0, 0, 0);
		filter: blur(25px);

		&.show {
			opacity: 1;
			filter: initial;
			transform: translate(0) translate3d(0, 0, 0);
		}
	}
	@media screen and (width < 768px) {
		.fadeInSlot {
			transition: all var(--speedVar) var(--transitionVar);
			opacity: 0;
			transform: translate(var(--mobileTranslateX), var(--mobileTranslateY))
				translate3d(0, 0, 0);
		}
	}
</style>
