---
import LWGLogo from '../../../public/images/logos/LW.G.astro';
import Button from '../UI/ButtonPrimary.astro';
import HamburgerMenu from '../UI/HamgurberMenu.astro';
import NavSignUpDialog from './NavSignUpDialog.astro';

const links = [
	{ href: '/', text: 'Home' },
	{ href: '/business.html', text: 'Business' },
	{ href: '/partners.html', text: 'Partners' },
	{ href: '/helpAndFaq.html', text: 'Help & FAQ' },
];
---

<script>
	const nav = document.getElementById('nav') as HTMLElement;
	const showMenuBtn = document.getElementById('hamburger-btn');
	const navMenu = document.getElementById('nav--menu') as HTMLMenuElement;
	const navLinks = document.getElementsByClassName('navigation-links');
	const windowLocation = window.location.pathname;
	const navHeight = nav.clientHeight || 0;

	showMenuBtn?.addEventListener('click', () => {
		navMenu.classList.toggle('show');
		document.querySelector('body')!.classList.toggle('noScroll');
		showNav({ isTop: scrollIsAtTop() });
	});

	let prevScrollPosition: number = 0;
	let interval: number;
	let timeSpentScrolling: number = 0;
	let isScrollTimerActive: boolean = false;
	let windowCurrentPosition: number = 0;
	let isNavVisible: boolean = true;
	document.addEventListener('scroll', () => {
		if (!isScrollTimerActive) {
			isScrollTimerActive = true;

			interval = setInterval(() => {
				timeSpentScrolling += 0.35;

				if (timeSpentScrolling >= 0.35 || !isScrollTimerActive) {
					// CONTINUE timer and check the position
					checkScrollPosition();
				}

				if (
					timeSpentScrolling > 0.4 &&
					windowCurrentPosition === window.scrollY
				) {
					// END the timer and check position
					checkScrollPosition();
					stopTimer();
				}

				windowCurrentPosition = window.scrollY;
			}, 350);
		}
	});

	function checkScrollPosition() {
		const scrolledBackOrTop = scrollIsAtTop() || scrolledBack();
		const scrolledForwards = scrolledForward();

		if (scrolledBackOrTop) {
			if (!isNavVisible) {
				showNav({ isTop: scrollIsAtTop() });
				isNavVisible = true;
			}
			prevScrollPosition = window.scrollY;
			return;
		}
		if (scrolledForwards) {
			if (isNavVisible) {
				hideNav();
				isNavVisible = false;
			}
			prevScrollPosition = window.scrollY;

			return;
		}
	}

	function stopTimer() {
		isScrollTimerActive = false;
		timeSpentScrolling = 0;
		clearInterval(interval);
	}

	function scrolledForward(): boolean {
		return (
			window.scrollY > navHeight &&
			window.scrollY > prevScrollPosition + navHeight
		);
	}
	function scrolledBack(): boolean {
		return (
			window.scrollY < prevScrollPosition - navHeight &&
			window.scrollY < prevScrollPosition
		);
	}
	function scrollIsAtTop(): boolean {
		return window.scrollY < navHeight;
	}

	function showNav({ isTop }: { isTop: boolean }) {
		nav.classList.remove('isHidden');
		if (isTop) {
			nav.classList.add('isTop');
			nav.classList.remove('isScrolledUpOpen');
		} else {
			nav.classList.remove('isTop');
			nav.classList.add('isScrolledUpOpen');
		}
	}

	function hideNav() {
		nav.classList.add('isHidden');
		nav.classList.remove('isTop');
		nav.classList.remove('isScrolledUpOpen');
	}

	for (let i = 0; i < navLinks.length; i++) {
		const link = navLinks.item(i);
		const linkId = link?.getAttribute('id');
		if (windowLocation === link?.getAttribute('data-pathname') && linkId) {
			document.getElementById(linkId)?.classList.add('active');
		}
	}
</script>
<script>
	const signUpForm = document.getElementById('signUpForm') as HTMLFormElement;
	const emailRegex = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/g;

	signUpForm.addEventListener('submit', (e) => {
		e.preventDefault();
		handleSignUp();
	});

	function handleSignUp() {
		// get form data from form submit event
		const formData = new FormData(signUpForm);
		const email = formData.get('emailInput') as string;
		if (!email || !email?.match(emailRegex))
			return alert('Please enter a valid email address');

		const frequency = formData.get('contactFrequency');
		alert(
			`Thank you for signing up! You will receive ${frequency} updates to ${email}`
		);
	}
</script>
<nav class='nav' id='nav'>
	<div class='controls-wrapper'>
		<a href='/' class='logoLink'>
			<LWGLogo class='logo' />
		</a>
		<menu class='menu' id='nav--menu'>
			<ul class='ul'>
				{
					links.map((link) => (
						<li>
							<a
								data-pathname={link.href}
								data-highlight='true'
								data-highlight-color='rgba(var(--grey), 0.1)'
								href={link.href}
								id={link.href}
								class='navigation-links'
							>
								{link.text}
							</a>
						</li>
					))
				}
			</ul>

			<div class='btn_signup btn_signup--mobile'>
				<Button
					id={'openSignUpModal--btn'}
					background={'--blue'}
					color={'--white'}
					height={'3rem'}
				>
					Sign Up
				</Button>
			</div>
		</menu>
		<div class='btn_signup'>
			<Button
				id={'openSignUpModal--btn'}
				background={'--orange'}
				color={'--white'}
				height={'3rem'}
			>
				Sign Up
			</Button>
		</div>
	</div>
</nav>
<div class='open-menu-btn'>
	<HamburgerMenu classes='open-menu-btn' />
</div>
<NavSignUpDialog
	openButtonId='openSignUpModal--btn'
	closeButtonId='closeSignUpModal--btn'
>
	<div class='nav-signup-dialog'>
		<h2>SIGN UP</h2>
		<p>
			Sign up to get access to the latest news, updates, and exclusive offers.
		</p>
		<form id='signUpForm'>
			<input
				class='emailInput'
				name='emailInput'
				type='text'
				placeholder='Email'
			/>
			<fieldset>
				<legend>Update frequency</legend>
				<div>
					<input
						type='radio'
						name='contactFrequency'
						id='dailyFrequency'
						value='daily'
					/>
					<label for='dailyFrequency'>Daily</label>
				</div>
				<div>
					<input
						name='contactFrequency'
						type='radio'
						placeholder='Weekly'
						id='weeklyFrequency'
						value='weekly'
						checked
					/>
					<label for='weeklyFrequency'>Weekly</label>
				</div>
				<div>
					<input
						name='contactFrequency'
						type='radio'
						placeholder='Monthly'
						id='monthlyFrequency'
						value='monthly'
					/>
					<label for='monthlyFrequency'>Monthly</label>
				</div>
			</fieldset>
			<button class='submitSignupForm-btn'>Lets Go!</button>
		</form>
		<button class='closeBtn' id='closeSignUpModal--btn'>Close</button>
	</div>
</NavSignUpDialog>

<style lang='scss'>
	@use 'src/sass/mixins.scss' as m;

	.nav-signup-dialog {
		display: flex;
		flex-direction: column;
		background-color: rgba(var(--white), 0.6);
		backdrop-filter: blur(50px);
		box-shadow: var(--shadow-2);
		border-radius: 15px;
		font-size: 1.6rem;
		position: relative;
		padding-inline: 8rem;
		max-width: var(--screen-small);
		margin-inline: auto;
		text-align: center;
		@media screen and (width < 768px) {
			padding-inline: 1rem;
		}

		& h2 {
			text-align: center;

			font-size: 8.5rem;
			margin-top: 4rem;
			margin-bottom: 2rem;
			background: -webkit-linear-gradient(
				-45deg,
				rgba(var(--blue-light), 1),
				rgba(var(--blue), 1)
			);
			-webkit-background-clip: text;
			-webkit-text-fill-color: transparent;
			text-shadow: var(--shadow-1);

			@media screen and (width < 768px) {
				font-size: 5.5rem;
			}
		}

		& p {
			color: rgb(var(--grey));
			margin-bottom: 1rem;
			padding-inline: 2rem;
		}

		& form {
			margin-inline: 3rem;

			& fieldset {
				& legend {
					border-bottom: 1px solid rgba(var(--black), 0.2);
				}
				text-align: left;
				border: none;
				margin-top: 4rem;
				padding-top: 2rem;

				& div {
					display: flex;
					justify-content: center;
					align-items: center;
					margin-bottom: 2rem;
					border: 1px solid rgba(var(--grey), 0.2);
					border-radius: 50px;
					transition: background-color 0.3s ease;

					@include m.hasHover {
						background-color: rgba(var(--black), 0.5);
					}

					&:has(input[type='radio']:checked) {
						background-color: rgba(var(--black), 0.95);

						& label {
							color: white;
						}
					}
				}
				& label {
					width: 100%;
					text-align: center;
					height: 100%;
					padding: 1rem;

					cursor: pointer;
				}
				& input[type='radio'] {
					display: none;
				}
			}
		}

		& .emailInput {
			margin-block: 1rem;
			padding: 1rem;
			border-radius: 5px;
			width: 100%;
			background-color: rgba(var(--white));
			box-shadow: 0px 5px 10px rgba(var(--black), 0.1);
		}

		& .submitSignupForm-btn {
			position: relative;
			padding-inline: 3rem;
			padding-block: 1.6rem;
			margin-bottom: 4rem;
			margin-top: 1.6rem;
			background-color: rgb(21, 21, 21);
			box-shadow: var(--shadow-btn);
			transition: all 0.2s ease-in-out;
			border-radius: 5px;
			width: 100%;
			color: white;

			@include m.hasHover {
				background-color: rgb(247, 247, 247);
				color: black;
				transform: translateY(-3px);

				&::before {
					transform: translateY(3px) translateX(-50%);
				}
			}

			&::before {
				transition: all 0.2s ease-in-out;

				content: '';
				position: absolute;
				top: -20px;
				left: 50%;
				transform: translateX(-50%);
				width: 90%;
				height: 1px;
				border-radius: 5px;
				background-color: rgba(var(--black), 0.1);
				opacity: 1;
			}
		}

		& .closeBtn {
			position: absolute;
			top: 10px;
			right: 10px;
			padding-inline: 1rem;
			padding-block: 0.5rem;
			border: 1px solid rgba(var(--grey), 0.3);
			border-radius: 5px;
			transition: all 0.2s ease-in-out;

			@include m.hasHover {
				background-color: rgba(var(--grey), 0.1);
			}
		}
	}

	.logoLink {
		display: flex;
		height: 2.5rem;
		width: auto;
	}

	.nav {
		--padding-block: 0.9rem;
		--transitionSpeed: 0.35s;
		width: 100%;
		padding: 1.2rem 2rem;
		font-weight: 400;
		font-size: 1.6rem;
		z-index: 10;
		position: fixed;
		left: 50%;
		transform: translateX(-50%);
		transition: transform var(--transitionSpeed) ease,
			background-color var(--transitionSpeed) ease,
			opacity var(--transitionSpeed) ease, border var(--transitionSpeed);
		border-bottom: transparent solid 1px;
		backdrop-filter: blur(5px);

		&.isTop {
			transform: translateY(0) translateX(-50%);
			background-color: rgba(var(--white), 0.1);
		}

		&.isHidden {
			transform: translateY(-100%) translateX(-50%);
			opacity: 0;
		}

		&.isScrolledUpOpen {
			transform: translateY(0) translateX(-50%);
			background-color: rgba(var(--white), 0.9);
			border-bottom: rgba(var(--grey), 0.1) solid 1px;
		}
	}
	.controls-wrapper {
		max-width: var(--screen-large);
		display: flex;
		align-items: center;
		justify-content: space-between;
		margin: 0 auto;

		@media screen and (width < 768px) {
			height: 45px;
			display: flex;
			justify-content: flex-start;
		}
	}
	.logo {
		width: auto;
		height: 2rem;
		opacity: 0.75;
		padding-left: 1.2rem;
	}
	menu {
		display: flex;
		align-items: center;
		margin: 0;
		padding: 0;
	}

	.btn_signup {
		&--mobile {
			margin-top: 3rem;
			text-align: center;
		}
	}

	.open-menu-btn {
		display: none;
		@media screen and (width < 768px) {
			display: initial;
			position: fixed;
			top: calc(6rem / 4);
			right: calc(6rem / 4);
			z-index: 9999;
		}
	}

	.ul {
		display: flex;
		gap: 6px;
		& a {
			border-radius: 5px;
			color: rgba(var(--grey));
			padding-inline: 2rem;
			padding-block: var(--padding-block);
			height: 100%;
			width: 100%;
			transition: all 0.2s ease-in-out, outline-offset 0.3s ease-in-out;

			outline: rgba(var(--grey), 0) solid 2px;
			outline-offset: -5px;

			box-shadow: inset 0 0 0px 15px rgba(var(--grey), 0),
				0 0 20px 10px rgba(var(--grey), 0);

			&.active {
				background-color: rgba(var(--grey), 0.05);
			}

			@include m.hasHover {
				color: rgba(var(--black));
				text-shadow: 0 1px 5px rgba(var(--grey), 0.25);
				backdrop-filter: blur(50px);
				box-shadow: inset 0 0 5px 5px rgba(var(--grey), 0.02),
					0 0 2px 0px rgba(var(--grey), 0.05);
				background-color: rgba(var(--grey), 0.075);
				outline: rgba(var(--grey), 0.075) solid 2px;
				outline-offset: 2px;
			}

			&:active {
				color: rgba(var(--black));
				text-shadow: 0 1px 5px rgba(var(--grey), 0.25);
				box-shadow: inset 0 0 5px 5px rgba(var(--grey), 0.025),
					0 0 5px 0px rgba(var(--grey), 0.05);
				background-color: rgba(var(--grey), 0.15);
				outline: rgba(var(--grey), 0.065) solid 1px;
				outline-offset: 1px;
			}
		}
	}

	@media screen and (width < 768px) {
		.logo {
			padding-left: 1rem;
		}

		.btn_signup {
			display: none;
			&--mobile {
				display: block;
			}
		}

		menu {
			display: none;
			z-index: 100;
			position: absolute;
			top: 100%;
			left: 0;
			width: 100%;
			height: 100vh;
			transition: all 0.5s ease;
			border-top: 1px solid rgba(var(--grey), 0.2);
			background-color: rgba(var(--white), 0.99);
			transform: translateX(-100%);

			& .ul {
				flex-direction: column;
				align-items: center;
				gap: 26px;
				margin-top: 4rem;
			}

			&.show {
				display: block;
				animation: fadeIn 0.2s ease;
				animation-fill-mode: forwards;

				@keyframes fadeIn {
					0% {
						opacity: 0;
					}
					100% {
						opacity: 1;
						transform: translateX(0%);
					}
				}
			}
		}
	}
	@media screen and (width > 768px) {
		.btn_signup {
			display: block;
			&--mobile {
				display: none;
			}
		}

		.open-menu-btn {
			display: none;
		}
	}
</style>
